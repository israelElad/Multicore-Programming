//Exercise 3.1: If the function f returns a non-finite float64 value, the SVG file will contain invalid <polygon> elements
//(although many SVG renderers handle this gracefully). Modify the program to skip invalid polygons.

package main

import (
	"fmt"
	"math"
)

const (
	width, height = 600, 320            // canvas size in pixels
	cells         = 100                 // number of grid cells
	xyrange       = 30.0                // axis ranges (-xyrange..+xyrange)
	xyscale       = width / 2 / xyrange // pixels per x or y unit
	zscale        = height * 0.4        // pixels per z unit
	angle         = math.Pi / 6         // angle of x, y axes (=30°)
)

var sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)

func main() {
	fmt.Printf("<svg xmlns='http://www.w3.org/2000/svg' "+
		"style='stroke: grey; fill: white; stroke-width: 0.7' "+
		"width='%d' height='%d'>", width, height)
	for i := 0; i < cells; i++ {
		for j := 0; j < cells; j++ {
			ax, ay := corner(i+1, j)
			bx, by := corner(i, j)
			cx, cy := corner(i, j+1)
			dx, dy := corner(i+1, j+1)
			if math.IsInf(ax, 0) || math.IsInf(ay, 0) || math.IsInf(bx, 0) || math.IsInf(by, 0) || math.IsInf(cx, 0) || math.IsInf(cy, 0) || math.IsInf(dx, 0) || math.IsInf(dy, 0) {
				continue
			}
			fmt.Printf("<polygon points='%g,%g %g,%g %g,%g %g,%g'/>\n",
				ax, ay, bx, by, cx, cy, dx, dy)
		}
	}
	fmt.Println("</svg>")
}

func corner(i, j int) (float64, float64) {
	// Find point (x,y) at corner of cell (i,j).
	x := xyrange * (float64(i)/cells - 0.5)
	y := xyrange * (float64(j)/cells - 0.5)

	// Compute surface height z.
	z := f(x, y)

	// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).
	sx := width/2 + (x-y)*cos30*xyscale
	sy := height/2 + (x+y)*sin30*xyscale - z*zscale
	return sx, sy
}

func f(x, y float64) float64 {
	r := math.Hypot(x, y) // distance from (0,0)
	return math.Sin(r) / r
}

//Output: SVG file


//*********************************************************************
 
//Exercise 3.2: Experiment with visualizations of other functions from the math package. Can you produce an egg box, moguls, or a saddle?

package main

import (
	"fmt"
	"math"
	"os"
)

const (
	width, height = 600, 320            // canvas size in pixels
	cells         = 100                 // number of grid cells
	xyrange       = 30.0                // axis ranges (-xyrange..+xyrange)
	xyscale       = width / 2 / xyrange // pixels per x or y unit
	zscale        = height * 0.4        // pixels per z unit
	angle         = math.Pi / 6         // angle of x, y axes (=30°)
)

var sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)

type selectedFunc func(x, y float64) float64

func eggBox(x, y float64) float64 {
	return 0.2 * (math.Cos(x) + math.Cos(y))
}

func saddle(x, y float64) float64 {
	return (math.Pow(y, 2)/math.Pow(25.0, 2) - math.Pow(x, 2)/math.Pow(17.0, 2))
}

func moguls(x, y float64) float64 {
	return math.Pow(2, math.Sin(y)) * math.Pow(2, math.Sin(x)) / 20
}

func corner(i, j int, f selectedFunc) (float64, float64) {
	// Find point (x,y) at corner of cell (i,j).
	x := xyrange * (float64(i)/cells - 0.5)
	y := xyrange * (float64(j)/cells - 0.5)

	// Compute surface height z.
	z := f(x, y)

	// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).
	sx := width/2 + (x-y)*cos30*xyscale
	sy := height/2 + (x+y)*sin30*xyscale - z*zscale
	return sx, sy
}

func main() {
	if len(os.Args) < 2 {
		os.Exit(1)
	}

	var f selectedFunc
	if os.Args[1] == "eggbox" {
		f = eggBox
	} else if os.Args[1] == "saddle" {
		f = saddle
	} else if os.Args[1] == "moguls" {
		f = moguls
	}

	fmt.Printf("<svg xmlns='http://www.w3.org/2000/svg' "+
		"style='stroke: grey; fill: white; stroke-width: 0.7' "+
		"width='%d' height='%d'>", width, height)
	for i := 0; i < cells; i++ {
		for j := 0; j < cells; j++ {
			ax, ay := corner(i+1, j, f)
			bx, by := corner(i, j, f)
			cx, cy := corner(i, j+1, f)
			dx, dy := corner(i+1, j+1, f)
			fmt.Printf("<polygon points='%g,%g %g,%g %g,%g %g,%g'/>\n",
				ax, ay, bx, by, cx, cy, dx, dy)
		}
	}
	fmt.Println("</svg>")
}

//Output: 3 SVG files

//*********************************************************************

//Exercise 3.3: Color each polygon based on its height, so that the peaks are colored red (#ff0000) and the valleys blue (#0000ff).

package main

import (
	"fmt"
	"math"
)

const (
	width, height = 600, 320            // canvas size in pixels
	cells         = 100                 // number of grid cells
	xyrange       = 30.0                // axis ranges (-xyrange..+xyrange)
	xyscale       = width / 2 / xyrange // pixels per x or y unit
	zscale        = height * 0.4        // pixels per z unit
	angle         = math.Pi / 6         // angle of x, y axes (=30°)
)

var sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)

func main() {
	fmt.Printf("<svg xmlns='http://www.w3.org/2000/svg' "+
		"style='stroke: grey; fill: white; stroke-width: 0.7' "+
		"width='%d' height='%d'>", width, height)
	for i := 0; i < cells; i++ {
		for j := 0; j < cells; j++ {
			ax, ay, _ := corner(i+1, j)
			bx, by, _ := corner(i, j)
			cx, cy, _ := corner(i, j+1)
			dx, dy, isValley := corner(i+1, j+1)

			var polyColor string
			if isValley {
				polyColor = "#0000ff"
			} else {
				polyColor = "#ff0000"
			}

			fmt.Printf("<polygon style='fill: %s' points='%g,%g %g,%g %g,%g %g,%g'/>\n",
				polyColor, ax, ay, bx, by, cx, cy, dx, dy)
		}
	}
	fmt.Println("</svg>")
}

func corner(i, j int) (float64, float64, bool) {
	// Find point (x,y) at corner of cell (i,j).
	x := xyrange * (float64(i)/cells - 0.5)
	y := xyrange * (float64(j)/cells - 0.5)

	// Compute surface height z.
	z := f(x, y)

	var isValley = false
	if z < 0 {
		isValley = true
	}

	// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).
	sx := width/2 + (x-y)*cos30*xyscale
	sy := height/2 + (x+y)*sin30*xyscale - z*zscale
	return sx, sy, isValley
}

func f(x, y float64) float64 {
	r := math.Hypot(x, y) // distance from (0,0)
	return math.Sin(r) / r
}

//Output: SVG file

//*********************************************************************

//Exercise 4.3: Rewrite reverse to use an array pointer instead of a slice.

package main

import (
	"fmt"
)

// reverse reverses a slice of ints in place.
func reverse(ptr *[6]int) {
	for i, j := 0, len(ptr)-1; i < j; i, j = i+1, j-1 {
		ptr[i], ptr[j] = ptr[j], ptr[i]
	}
}

func main() {
	a := [...]int{0, 1, 2, 3, 4, 5}
	fmt.Println(a, "\n\n")
	reverse(&a)
	fmt.Println(a, "\n\n") // "[5 4 3 2 1 0]"
}

/*
Output: 
[0 1 2 3 4 5]


[5 4 3 2 1 0]
*/

//*********************************************************************

//Exercise 4.4: Write a version of rotate that operates in a single pass.

package main

import "fmt"

func rotate_n_left(slice []int, n int) {
	if n < 0 {
		fmt.Println("Slice unchanged. Invalid number of rotations!")
		return
	}
	sliceLen := len(slice)
	shiftsCount := n % sliceLen
	// append unknown number of elements to the end of the original slice (that's why we're using "...") and put the result in tempSlice
	tempSlice := append(slice, slice[:shiftsCount]...)
	// take the relevant elements from the tempSlice
	rotatedSlice := tempSlice[shiftsCount : shiftsCount+sliceLen]
	//copy the rotated slice to the original. no need to return it as the underlying array was changed by reference and the capacity/length remains the same.
	copy(slice, rotatedSlice)
}

func main() {
	slice := []int{0, 1, 2, 3, 4, 5}
	rotate_n_left(slice, 2)
	fmt.Println(slice)
}

//Output: [2 3 4 5 0 1]

//*********************************************************************

//Exercise 4.5: Write an in-place function to eliminate adjacent duplicates in a []string slice.

package main

import "fmt"

func remove_adj_duplicates(slice []string) []string {
	index := 0                  //keep track of where to write the strings without duplicates in the slice
	for _, str := range slice { //no need for the index while traversing the slice
		if str == slice[index] { //an adjacent duplicate
			continue
		}
		//not duplicated(at least not adjacently)
		index++
		slice[index] = str
	}
	return slice[:index+1] //return a slice with the relevant elements only

}

func main() {
	slice := []string{"a", "c", "c", "c", "ab", "c", "c", "a", "c"} //slice declaration(no size specified)
	slice = remove_adj_duplicates(slice)
	fmt.Println(slice)
}

//Output: [a c ab c a c]

//*********************************************************************

//Exercise 4.6: Write an in-place function that squashes each run of adjacent Unicode spaces (see unicode.IsSpace) in a UTF-8-encoded []byte slice into a single ASCII space.

package main

import (
	"fmt"
	"unicode"
	"unicode/utf8"
)

func utf8SpacesToASCIISpaces(str []byte) []byte {
	for i := 0; i <= len(str)-1; {
		strSliceFromI := str[i:]
		currentRune, size := utf8.DecodeRune(strSliceFromI)
		if unicode.IsSpace(currentRune) {

			//put ASCII space in i index, and copy all the characters after the UTF space after it.
			str[i] = ' '
			afterUTFSpace := str[i+size:]
			afterASCIISpace := str[i+1:]
			copy(afterASCIISpace, afterUTFSpace)

			str = str[:len(str)+1-size]
			i++
		} else {
			i += size
		}
	}
	return str
}

func main() {
	str := "Hello　世界"
	fmt.Println(str)
	str = string(utf8SpacesToASCIISpaces([]byte(str)))
	fmt.Println(str)
}

/*
Output:
Hello　世界
Hello 世界
*/

//*********************************************************************

// Exercise 4.7: Modify reverse to reverse the characters of a []byte slice that represents a UTF-8-encoded string, in place.

package main

import (
	"fmt"
	"unicode/utf8"
)

// reverses a slice of bytes in place.
func reverse(b []byte) []byte {
	for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {
		b[i], b[j] = b[j], b[i]
	}
	return b
}

// reverses a bytes slice containing UTF8 runes(each rune occupies 1-4 bytes).
// first we reverse each rune. Finally when we're done we reverse the whole slice.
func UTF8Reverse(bRunes []byte) []byte {
	i := 0
	//iterate over each rune
	for i <= len(bRunes)-1 {
		_, currentRuneSize := utf8.DecodeRune(bRunes[i:])
		currentRune := bRunes[i : i+currentRuneSize]
		reverse(currentRune)
		i += currentRuneSize
	}
	reverse(bRunes)
	return bRunes
}

func main() {
	s := "Hello, 世界"
	b := []byte(s)
	fmt.Println(string(b))
	b = UTF8Reverse(b)
	fmt.Println(string(b))
}

/*
Output:
Hello, 世界
界世 ,olleH
*/

//*********************************************************************

//Exercise 5.10: Rewrite topoSort to use maps instead of slices and eliminate the initial sort. Verify that the results, though nondeterministic, are valid topological orderings

package main

import (
	"fmt"
)

// prereqs maps computer science courses to their prerequisites.
var prereqs = map[string]map[string]bool{
	"algorithms": {"data structures": false},
	"calculus":   {"linear algebra": false},
	"compilers": {
		"data structures":       false,
		"formal languages":      false,
		"computer organization": false,
	},
	"data structures":       {"discrete math": false},
	"databases":             {"data structures": false},
	"discrete math":         {"intro to programming": false},
	"formal languages":      {"discrete math": false},
	"networks":              {"operating systems": false},
	"operating systems":     {"data structures": false, "computer organization": false},
	"programming languages": {"data structures": false, "computer organization": false},
}

func main() {
	var order = topoSort(prereqs)
	for i := 0; i < len(order); i++ {
		fmt.Printf("%d:\t%s\n", i+1, order[i])
	}
}

func topoSort(m map[string]map[string]bool) map[int]string {
	//course num as key, course name as value.
	var order = make(map[int]string)
	seen := make(map[string]bool)
	var visitAll func(items map[string]bool)

	var i = 0
	visitAll = func(items map[string]bool) {
		for item := range items {

			if !seen[item] {
				seen[item] = true
				visitAll(m[item])
				order[i] = item
				i++
			}
		}
	}

	keys := make(map[string]bool)
	for key := range m {
		keys[key] = true
	}

	visitAll(keys)

	return order
}

/*
Output 1:
1:      linear algebra
2:      calculus
3:      computer organization
4:      intro to programming
5:      discrete math
6:      data structures
7:      operating systems
8:      networks
9:      programming languages
10:     formal languages
11:     compilers
12:     databases
13:     algorithms

Output 2:
1:      intro to programming
2:      discrete math
3:      data structures
4:      algorithms
5:      computer organization
6:      operating systems
7:      networks
8:      databases
9:      formal languages
10:     programming languages
11:     linear algebra
12:     calculus
13:     compilers

Output 3:
1:      intro to programming
2:      discrete math
3:      data structures
4:      computer organization
5:      operating systems
6:      formal languages
7:      compilers
8:      databases
9:      networks
10:     programming languages
11:     algorithms
12:     linear algebra
13:     calculus
*/

//*********************************************************************

//Exercise 5.11: The instructor of the linear algebra course decides that calculus is now a prerequisite. Extend the topoSort function to report cycles.

package main

import (
	"fmt"
	"sort"
	"strings"
)

// prereqs maps computer science courses to their prerequisites.
var prereqs = map[string][]string{
	"algorithms":     {"data structures"},
	"calculus":       {"linear algebra"},
	"linear algebra": {"calculus"},
	"compilers": {
		"data structures",
		"formal languages",
		"computer organization",
	},
	"data structures":       {"discrete math"},
	"databases":             {"data structures"},
	"discrete math":         {"intro to programming"},
	"formal languages":      {"discrete math"},
	"networks":              {"operating systems"},
	"operating systems":     {"data structures", "computer organization"},
	"programming languages": {"data structures", "computer organization"},
}

func main() {
	for i, course := range topoSort(prereqs) {
		fmt.Printf("%d:\t%s\n", i+1, course)
	}
}

func topoSort(m map[string][]string) []string {
	var order []string
	seen := make(map[string]bool)
	var visitAll func(items []string, prev []string)
	visitAll = func(items []string, prev []string) {
		for _, item := range items {

			for _, prev_item := range prev {
				if item == prev_item { //cycle found
					prev_as_str := strings.Join(prev, "-->")
					fmt.Println("Cycle found! previous courses: " + prev_as_str + ". current: " + item)
				}
			}

			if !seen[item] {
				seen[item] = true
				visitAll(m[item], append(prev, item))
				order = append(order, item)
			}
		}
	}
	var keys []string
	for key := range m {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	visitAll(keys, nil)
	return order
}

/*
Output:
Cycle found! previous courses: calculus-->linear algebra. current: calculus
1:      intro to programming
2:      discrete math
3:      data structures
4:      algorithms
5:      linear algebra
6:      calculus
7:      formal languages
8:      computer organization
9:      compilers
10:     databases
11:     operating systems
12:     networks
13:     programming languages
*/

//*********************************************************************

//Exercise 5.12: The startElement and endElement functions in gopl.io/ch5/outline2 (§5.5) share a global variable, depth.
//Turn them into anonymous functions that share a variable local to the outline function.

// Outline prints the outline of an HTML document tree.
package main

import (
	"fmt"
	"golang.org/x/net/html"
	"net/http"
	"os"
)

func main() {
	for _, url := range os.Args[1:] {
		outline(url)
	}
}

func outline(url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	doc, err := html.Parse(resp.Body)
	if err != nil {
		return err
	}

	//depth local, startElement and endElement are anonymous functions
	var depth int

	startElement := func(n *html.Node) {
		if n.Type == html.ElementNode {
			fmt.Printf("%*s<%s>\n", depth*2, "", n.Data)
			depth++
		}
	}

	endElement := func(n *html.Node) {
		if n.Type == html.ElementNode {
			depth--
			fmt.Printf("%*s</%s>\n", depth*2, "", n.Data)
		}
	}

	forEachNode(doc, startElement, endElement)

	return nil
}

// forEachNode calls the functions pre(x) and post(x) for each node
// x in the tree rooted at n. Both functions are optional.
// pre is called before the children are visited (preorder) and
// post is called after (postorder).
func forEachNode(n *html.Node, pre, post func(n *html.Node)) {
	if pre != nil {
		pre(n)
	}

	for c := n.FirstChild; c != nil; c = c.NextSibling {
		forEachNode(c, pre, post)
	}

	if post != nil {
		post(n)
	}
}

/*
Input(args):
https://golang.org

Output:
<html>
  <head>
    <meta>
    </meta>
    <meta>
    </meta>
    <meta>
    </meta>
    <meta>
    </meta>
    <title>
    </title>
    <link>
    </link>
    <link>
    </link>
    <link>
    </link>
    <link>
    </link>
    <script>
    </script>
    <script>
    </script>
    <script>
    </script>
    <script>
    </script>
    <script>
    </script>
    <script>
    </script>
  </head>
  <body>
    <header>
      <div>
        <a>
        </a>
      </div>
      <nav>
        <a>
          <img>
          </img>
        </a>
        <button>
          <div>
          </div>
        </button>
        <ul>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <form>
              <input>
              </input>
              <button>
                <svg>
                  <title>
                  </title>
                  <path>
                  </path>
                  <path>
                  </path>
                </svg>
              </button>
            </form>
          </li>
        </ul>
      </nav>
    </header>
    <main>
      <div>
        <div>
        </div>
        <div>
          <section>
            <h1>
              <strong>
              </strong>
              <strong>
              </strong>
              <strong>
              </strong>
            </h1>
            <i>
            </i>
            <a>
              <img>
              </img>
            </a>
            <p>
              <br>
              </br>
            </p>
          </section>
          <section>
            <div>
              <h2>
              </h2>
              <a>
              </a>
            </div>
            <div>
              <textarea>
              </textarea>
            </div>
            <div>
              <pre>
                <noscript>
                </noscript>
              </pre>
            </div>
            <div>
              <select>
                <option>
                </option>
                <option>
                </option>
                <option>
                </option>
                <option>
                </option>
                <option>
                </option>
                <option>
                </option>
                <option>
                </option>
                <option>
                </option>
              </select>
              <div>
                <button>
                </button>
                <div>
                  <button>
                  </button>
                  <a>
                  </a>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h2>
            </h2>
            <div>
              <a>
              </a>
            </div>
          </section>
          <section>
            <h2>
            </h2>
            <div>
              <iframe>
              </iframe>
            </div>
          </section>
        </div>
        <script>
        </script>
      </div>
    </main>
    <footer>
      <div>
        <img>
        </img>
        <ul>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
          <li>
            <a>
            </a>
          </li>
        </ul>
        <a>
        </a>
      </div>
    </footer>
    <script>
    </script>
  </body>
</html>

*/

//*********************************************************************

//Exercise 5.13: Modify crawl to make local copies of the pages it finds, creating directories as necessary.
//Don’t make copies of pages that come from a different domain. For example, if the original page comes from golang.org,
//save all files from there, but exclude ones from vimeo.com.

// Findlinks3 crawls the web, starting with the URLs on the command line.
package main

import (
	"fmt"
	"gopl.io/ch5/links"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"path"
	"regexp"
	"strings"
)

//!+breadthFirst
// breadthFirst calls f for each item in the worklist.
// Any items returned by f are added to the worklist.
// f is called at most once for each item.
func breadthFirst(f func(item string) []string, worklist []string) {
	seen := make(map[string]bool)
	for len(worklist) > 0 {
		items := worklist
		worklist = nil
		for _, item := range items {
			if !seen[item] {
				seen[item] = true
				worklist = append(worklist, f(item)...)
			}
		}
	}
}

//!-breadthFirst

//!+crawl
func crawl(url string) []string {
	fmt.Println(url)
	save_local_copy(url)
	list, err := links.Extract(url)
	if err != nil {
		log.Print(err)
	}
	return list
}

var originalDomain string

func save_local_copy(urlAsStr string) {
	//Parse parses rawurl into a URL structure.
	urlStruct, err := url.Parse(urlAsStr)
	if err != nil {
		log.Print(err)
	}
	//first time- define the original domain as current url
	if len(originalDomain) == 0 {
		originalDomain = urlStruct.Host
	}
	//same domain as the original domain - save it
	if originalDomain == urlStruct.Host {
		var directory string
		var filename string

		fileCheck, _ := regexp.MatchString(".+\\..+", path.Base(urlStruct.Path))
		//file
		if fileCheck {
			//domain + path to file without the file name(only Dir)
			directory = path.Join(urlStruct.Host, path.Dir(urlStruct.Path))
			//Trim returns a slice of the string with all leading and trailing Unicode code points contained in cutset removed.
			filename = strings.Trim(path.Base(urlStruct.Path), "/")
		} else { //dir
			//domain + path to dir
			directory = path.Join(urlStruct.Host, urlStruct.Path)
			filename = "page.html"
		}

		//MkdirAll creates a directory named path, along with any necessary parents, and returns nil, or else returns an error.
		//The permission bits perm (before umask) are used for all directories that MkdirAll creates. If path is already a directory, MkdirAll does nothing and returns nil.
		err = os.MkdirAll(directory, 0777)
		if err != nil {
			log.Print(err)
		}
		resp, err := http.Get(urlAsStr)
		if err != nil {
			log.Print(err)
		}
		defer resp.Body.Close()
		file, err := os.Create(path.Join(directory, filename))
		if err != nil {
			log.Print(err)
		}
		_, err = io.Copy(file, resp.Body)
		if err != nil {
			log.Print(err)
		}
		err = file.Close()
		if err != nil {
			log.Print(err)
		}
	}
}

func main() {
	// Crawl the web breadth-first,
	// starting from the command-line arguments.
	breadthFirst(crawl, os.Args[1:])
}

/*
Input(args):
https://golang.org

Output:

https://golang.org
https://support.eji.org/give/153413/#!/donation/checkout
https://golang.org/
https://golang.org/doc/
https://golang.org/pkg/
https://golang.org/project/
https://golang.org/help/
https://golang.org/blog/
https://play.golang.org/
https://golang.org/dl/
https://tour.golang.org/
https://blog.golang.org/
https://golang.org/doc/copyright.html
https://golang.org/doc/tos.html
http://www.google.com/intl/en/policies/privacy/
http://golang.org/issues/new?title=x/website:
https://google.com
https://golang.org/doc/install
https://golang.org/doc/code.html
https://golang.org/cmd/go/
https://golang.org/doc/editors.html
https://golang.org/doc/effective_go.html
https://golang.org/doc/diagnostics.html
https://golang.org/doc/faq
https://golang.org/wiki
https://golang.org/wiki/Learn
https://golang.org/doc/cmd
https://golang.org/ref/spec
https://golang.org/ref/mem
https://golang.org/doc/devel/release.html
https://golang.org/doc/codewalk/functions
https://golang.org/doc/codewalk/markov
https://golang.org/doc/codewalk/sharemem
https://golang.org/doc/articles/wiki/
https://golang.org/blog/json-rpc-tale-of-interfaces
https://golang.org/blog/gos-declaration-syntax
https://golang.org/blog/defer-panic-and-recover

here i stopped it so that the saves files woudn't take much storage and the uploaded file will be too big to upload.

Another output is the saved directories and files in the generated directory called "golang.org"
*/

//*********************************************************************

//Exercise 5.14: Use the breadthFirst function to explore a different structure.
//For example, you could use the course dependencies from the topoSort example (a directed graph).

package main

import (
	"fmt"
)

// prereqs maps computer science courses to their prerequisites.
var prereqs = map[string][]string{
	"algorithms": {"data structures"},
	"calculus":   {"linear algebra"},

	"compilers": {
		"data structures",
		"formal languages",
		"computer organization",
	},

	"data structures":       {"discrete math"},
	"databases":             {"data structures"},
	"discrete math":         {"intro to programming"},
	"formal languages":      {"discrete math"},
	"networks":              {"operating systems"},
	"operating systems":     {"data structures", "computer organization"},
	"programming languages": {"data structures", "computer organization"},
}

//!+breadthFirst from Findlinks3 crawler
func breadthFirst(f func(item string) []string, worklist []string) {
	seen := make(map[string]bool)
	for len(worklist) > 0 {
		items := worklist
		worklist = nil
		for _, item := range items {
			if !seen[item] {
				seen[item] = true
				worklist = append(worklist, f(item)...)
			}
		}
	}
}

func main() {
	for course, course_prereqs := range prereqs {
		fmt.Println(course + " prerequisites:")
		breadthFirst(appendDeps, course_prereqs)
		fmt.Println("*********************")
	}
}

func appendDeps(course string) []string {
	var order []string
	fmt.Println(course)
	for _, item := range prereqs[course] {
		order = append(order, item)
	}
	return order
}

/*
Output 1:

formal languages prerequisites:
discrete math
intro to programming
*********************
networks prerequisites:
operating systems
data structures
computer organization
discrete math
intro to programming
*********************
operating systems prerequisites:
data structures
computer organization
discrete math
intro to programming
*********************
algorithms prerequisites:
data structures
discrete math
intro to programming
*********************
compilers prerequisites:
data structures
formal languages
computer organization
discrete math
intro to programming
*********************
data structures prerequisites:
discrete math
intro to programming
*********************
databases prerequisites:
data structures
discrete math
intro to programming
*********************
discrete math prerequisites:
intro to programming
*********************
programming languages prerequisites:
data structures
computer organization
discrete math
intro to programming
*********************
calculus prerequisites:
linear algebra
*********************


Output 2:

operating systems prerequisites:
data structures
computer organization
discrete math
intro to programming
*********************
algorithms prerequisites:
data structures
discrete math
intro to programming
*********************
data structures prerequisites:
discrete math
intro to programming
*********************
databases prerequisites:
data structures
discrete math
intro to programming
*********************
discrete math prerequisites:
intro to programming
*********************
programming languages prerequisites:
data structures
computer organization
discrete math
intro to programming
*********************
calculus prerequisites:
linear algebra
*********************
compilers prerequisites:
data structures
formal languages
computer organization
discrete math
intro to programming
*********************
formal languages prerequisites:
discrete math
intro to programming
*********************
networks prerequisites:
operating systems
data structures
computer organization
discrete math
intro to programming
*********************

as you can see, the prerequisites of each course are the same,
but the order of which the courses appear isn't.
that's because map elements aren't being stored in a fixed order, so iterating over a map return it's elements in a different order each time.
that's why we get different outputs- depend on which courses we pulled first from the map.
*/
